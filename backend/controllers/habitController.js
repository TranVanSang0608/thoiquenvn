const asyncHandler = require('express-async-handler');
const Habit = require('../models/habitModel');
const Completion = require('../models/completionModel');
const ErrorHandler = require('../utils/errorHandler');

// @desc    L·∫•y t·∫•t c·∫£ th√≥i quen c·ªßa ng∆∞·ªùi d√πng
// @route   GET /api/habits
// @access  Private
const getHabits = asyncHandler(async (req, res) => {
  const habits = await Habit.find({ user: req.user._id, isArchived: false });
  res.json(habits);
});

// @desc    L·∫•y chi ti·∫øt m·ªôt th√≥i quen
// @route   GET /api/habits/:id
// @access  Private
const getHabitById = asyncHandler(async (req, res, next) => {
  const habit = await Habit.findById(req.params.id);

  if (habit && habit.user.toString() === req.user._id.toString()) {
    res.json(habit);
  } else {
    return next(new ErrorHandler('Kh√¥ng t√¨m th·∫•y th√≥i quen', 404));
  }
});

// @desc    T·∫°o th√≥i quen m·ªõi
// @route   POST /api/habits
// @access  Private
const createHabit = asyncHandler(async (req, res) => {
  const {
    title,
    description,
    icon,
    color,
    category,
    frequency,
    reminder,
  } = req.body;

  const habit = await Habit.create({
    user: req.user._id,
    title,
    description: description || '',
    icon: icon || 'üéØ',
    color: color || '#8A5CF5',
    category: category || 'general',
    frequency: frequency || {
      type: 'daily',
      days: [0, 1, 2, 3, 4, 5, 6],
      timesPerPeriod: 1,
    },
    reminder: reminder || {
      enabled: false,
      time: '09:00',
      days: [0, 1, 2, 3, 4, 5, 6],
    },
  });

  res.status(201).json(habit);
});

// @desc    C·∫≠p nh·∫≠t th√≥i quen
// @route   PUT /api/habits/:id
// @access  Private
const updateHabit = asyncHandler(async (req, res, next) => {
  const habit = await Habit.findById(req.params.id);

  if (habit && habit.user.toString() === req.user._id.toString()) {
    habit.title = req.body.title || habit.title;
    habit.description = req.body.description !== undefined ? req.body.description : habit.description;
    habit.icon = req.body.icon || habit.icon;
    habit.color = req.body.color || habit.color;
    habit.category = req.body.category || habit.category;
    
    if (req.body.frequency) {
      habit.frequency = {
        ...habit.frequency,
        ...req.body.frequency,
      };
    }
    
    if (req.body.reminder) {
      habit.reminder = {
        ...habit.reminder,
        ...req.body.reminder,
      };
    }
    
    if (req.body.isArchived !== undefined) {
      habit.isArchived = req.body.isArchived;
    }

    const updatedHabit = await habit.save();
    res.json(updatedHabit);
  } else {
    return next(new ErrorHandler('Kh√¥ng t√¨m th·∫•y th√≥i quen', 404));
  }
});

// @desc    X√≥a th√≥i quen
// @route   DELETE /api/habits/:id
// @access  Private
const deleteHabit = asyncHandler(async (req, res, next) => {
  const habit = await Habit.findById(req.params.id);

  if (habit && habit.user.toString() === req.user._id.toString()) {
    await habit.remove();
    // X√≥a t·∫•t c·∫£ c√°c completion li√™n quan
    await Completion.deleteMany({ habit: req.params.id });
    res.json({ message: 'ƒê√£ x√≥a th√≥i quen' });
  } else {
    return next(new ErrorHandler('Kh√¥ng t√¨m th·∫•y th√≥i quen', 404));
  }
});

// @desc    ƒê√°nh d·∫•u th√≥i quen ƒë√£ ho√†n th√†nh
// @route   POST /api/habits/:id/complete
// @access  Private
const completeHabit = asyncHandler(async (req, res, next) => {
  const habit = await Habit.findById(req.params.id);

  if (!habit) {
    return next(new ErrorHandler('Kh√¥ng t√¨m th·∫•y th√≥i quen', 404));
  }

  if (habit.user.toString() !== req.user._id.toString()) {
    return next(new ErrorHandler('Kh√¥ng ƒë∆∞·ª£c ph√©p', 401));
  }

  // L·∫•y ng√†y t·ª´ body ho·∫∑c s·ª≠ d·ª•ng ng√†y hi·ªán t·∫°i
  const date = req.body.date ? new Date(req.body.date) : new Date();
  // ƒê·∫∑t gi·ªù, ph√∫t, gi√¢y v·ªÅ 0 ƒë·ªÉ so s√°nh ng√†y
  date.setHours(0, 0, 0, 0);

  // Ki·ªÉm tra xem ƒë√£ c√≥ completion ch∆∞a
  let completion = await Completion.findOne({
    habit: habit._id,
    user: req.user._id,
    date: {
      $gte: date,
      $lt: new Date(date.getTime() + 24 * 60 * 60 * 1000),
    },
  });

  if (completion) {
    // N·∫øu ƒë√£ c√≥, c·∫≠p nh·∫≠t tr·∫°ng th√°i
    completion.completed = true;
    completion.note = req.body.note || completion.note;
  } else {
    // N·∫øu ch∆∞a c√≥, t·∫°o m·ªõi
    completion = new Completion({
      habit: habit._id,
      user: req.user._id,
      date,
      note: req.body.note || '',
    });
  }

  await completion.save();

  // C·∫≠p nh·∫≠t streak
  // C·∫ßn m·ªôt h√†m ph·ª©c t·∫°p h∆°n ƒë·ªÉ t√≠nh streak ƒë√∫ng
  // T·∫°m th·ªùi s·ª≠ d·ª•ng logic ƒë∆°n gi·∫£n
  const yesterday = new Date(date);
  yesterday.setDate(yesterday.getDate() - 1);
  
  const yesterdayCompletion = await Completion.findOne({
    habit: habit._id,
    user: req.user._id,
    date: {
      $gte: yesterday,
      $lt: date,
    },
    completed: true,
  });

  if (yesterdayCompletion) {
    habit.streak.current += 1;
  } else {
    habit.streak.current = 1;
  }

  // C·∫≠p nh·∫≠t longest streak n·∫øu c·∫ßn
  if (habit.streak.current > habit.streak.longest) {
    habit.streak.longest = habit.streak.current;
  }

  await habit.save();

  res.status(200).json(completion);
});

// @desc    B·ªè ƒë√°nh d·∫•u th√≥i quen ho√†n th√†nh
// @route   POST /api/habits/:id/uncomplete
// @access  Private
const uncompleteHabit = asyncHandler(async (req, res, next) => {
  const habit = await Habit.findById(req.params.id);

  if (!habit) {
    return next(new ErrorHandler('Kh√¥ng t√¨m th·∫•y th√≥i quen', 404));
  }

  if (habit.user.toString() !== req.user._id.toString()) {
    return next(new ErrorHandler('Kh√¥ng ƒë∆∞·ª£c ph√©p', 401));
  }

  // L·∫•y ng√†y t·ª´ body ho·∫∑c s·ª≠ d·ª•ng ng√†y hi·ªán t·∫°i
  const date = req.body.date ? new Date(req.body.date) : new Date();
  // ƒê·∫∑t gi·ªù, ph√∫t, gi√¢y v·ªÅ 0 ƒë·ªÉ so s√°nh ng√†y
  date.setHours(0, 0, 0, 0);

  // T√¨m completion
  const completion = await Completion.findOne({
    habit: habit._id,
    user: req.user._id,
    date: {
      $gte: date,
      $lt: new Date(date.getTime() + 24 * 60 * 60 * 1000),
    },
  });

  if (completion) {
    // C·∫≠p nh·∫≠t ho·∫∑c x√≥a
    if (req.body.note) {
      completion.completed = false;
      completion.note = req.body.note;
      await completion.save();
      res.status(200).json(completion);
    } else {
      await completion.remove();
      res.status(200).json({ message: 'ƒê√£ b·ªè ƒë√°nh d·∫•u th√≥i quen' });
    }
    
    // ƒê·∫∑t l·∫°i streak
    // Logic c·∫ßn ph·ª©c t·∫°p h∆°n ƒë·ªÉ t√≠nh streak ƒë√∫ng
    // T·∫°m th·ªùi s·ª≠ d·ª•ng logic ƒë∆°n gi·∫£n
    habit.streak.current = 0;
    await habit.save();
  } else {
    // Kh√¥ng c√≥ completion n√†o ƒë·ªÉ b·ªè ƒë√°nh d·∫•u
    res.status(200).json({ message: 'Kh√¥ng c√≥ th√≥i quen n√†o ƒë∆∞·ª£c ƒë√°nh d·∫•u' });
  }
});

// @desc    L·∫•y l·ªãch s·ª≠ ho√†n th√†nh c·ªßa m·ªôt th√≥i quen
// @route   GET /api/habits/:id/history
// @access  Private
const getHabitHistory = asyncHandler(async (req, res, next) => {
  const habit = await Habit.findById(req.params.id);

  if (!habit) {
    return next(new ErrorHandler('Kh√¥ng t√¨m th·∫•y th√≥i quen', 404));
  }

  if (habit.user.toString() !== req.user._id.toString()) {
    return next(new ErrorHandler('Kh√¥ng ƒë∆∞·ª£c ph√©p', 401));
  }

  // L·∫•y l·ªãch s·ª≠ trong kho·∫£ng th·ªùi gian
  const { startDate, endDate } = req.query;
  let dateFilter = { habit: habit._id, user: req.user._id };

  if (startDate || endDate) {
    dateFilter.date = {};
    if (startDate) {
      dateFilter.date.$gte = new Date(startDate);
    }
    if (endDate) {
      dateFilter.date.$lte = new Date(endDate);
      // ƒê·∫£m b·∫£o ƒë·∫øn h·∫øt ng√†y
      dateFilter.date.$lte.setHours(23, 59, 59, 999);
    }
  }

  const completions = await Completion.find(dateFilter).sort({ date: -1 });
  res.json(completions);
});

// @desc    L·∫•y t·∫•t c·∫£ completions theo ng√†y
// @route   GET /api/habits/completions/date/:date
// @access  Private
const getCompletionsByDate = asyncHandler(async (req, res) => {
  const { date } = req.params;
  
  // T·∫°o range c·ªßa ng√†y (t·ª´ 00:00 ƒë·∫øn 23:59:59)
  const startDate = new Date(date);
  startDate.setHours(0, 0, 0, 0);
  
  const endDate = new Date(date);
  endDate.setHours(23, 59, 59, 999);
  
  // T√¨m t·∫•t c·∫£ completion trong ng√†y cho user hi·ªán t·∫°i
  const completions = await Completion.find({
    user: req.user._id,
    date: {
      $gte: startDate,
      $lte: endDate
    }
  }).populate('habit', 'title icon color');
  
  res.json(completions);
});

// @desc    L·∫•y th·ªëng k√™ t·ªïng quan
// @route   GET /api/habits/stats/overview
// @access  Private
const getHabitStats = asyncHandler(async (req, res) => {
  const { startDate, endDate } = req.query;
  
  // Chuy·ªÉn ƒë·ªïi chu·ªói ng√†y th√†nh ƒë·ªëi t∆∞·ª£ng Date
  const start = startDate ? new Date(startDate) : new Date(new Date().setDate(new Date().getDate() - 30));
  const end = endDate ? new Date(endDate) : new Date();
  
  // Thi·∫øt l·∫≠p gi·ªù cho ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c
  start.setHours(0, 0, 0, 0);
  end.setHours(23, 59, 59, 999);
  
  // L·∫•y t·∫•t c·∫£ th√≥i quen c·ªßa ng∆∞·ªùi d√πng
  const habits = await Habit.find({ user: req.user._id, isArchived: false });
  
  // L·∫•y t·∫•t c·∫£ completions trong kho·∫£ng th·ªùi gian
  const completions = await Completion.find({
    user: req.user._id,
    date: { $gte: start, $lte: end },
    completed: true
  });
  
  // T√≠nh t·ª∑ l·ªá ho√†n th√†nh
  const daysInRange = Math.ceil((end - start) / (1000 * 60 * 60 * 24)) + 1;
  const totalPossible = habits.length * daysInRange;
  const completionRate = totalPossible > 0 
    ? (completions.length / totalPossible) * 100 
    : 0;
  
  // T√≠nh streak hi·ªán t·∫°i v√† t·ªët nh·∫•t
  // (Logic ph·ª©c t·∫°p h∆°n, ch·ªâ l√† v√≠ d·ª• ƒë∆°n gi·∫£n)
  const currentDate = new Date();
  currentDate.setHours(0, 0, 0, 0);
  
  // Ki·ªÉm tra xem h√¥m nay ƒë√£ ho√†n th√†nh √≠t nh·∫•t m·ªôt th√≥i quen ch∆∞a
  const todayCompletions = await Completion.countDocuments({
    user: req.user._id,
    date: { 
      $gte: currentDate,
      $lt: new Date(currentDate.getTime() + 24 * 60 * 60 * 1000)
    },
    completed: true
  });
  
  let currentStreak = 0;
  if (todayCompletions > 0) {
    currentStreak = 1;
    
    // Ki·ªÉm tra c√°c ng√†y tr∆∞·ªõc ƒë√≥
    let checkDate = new Date(currentDate);
    checkDate.setDate(checkDate.getDate() - 1);
    
    while (true) {
      const dayCompletions = await Completion.countDocuments({
        user: req.user._id,
        date: { 
          $gte: checkDate,
          $lt: new Date(checkDate.getTime() + 24 * 60 * 60 * 1000)
        },
        completed: true
      });
      
      if (dayCompletions > 0) {
        currentStreak++;
        checkDate.setDate(checkDate.getDate() - 1);
      } else {
        break;
      }
    }
  }
  
  // Logic ƒë·ªÉ t√≠nh streak t·ªët nh·∫•t trong l·ªãch s·ª≠
  // (ƒê√¢y s·∫Ω l√† logic ph·ª©c t·∫°p v√† t·ªën k√©m, n√™n c√≥ th·ªÉ c√¢n nh·∫Øc l∆∞u tr·ªØ gi√° tr·ªã n√†y)
  const bestStreak = Math.max(currentStreak, habits.reduce((max, habit) => Math.max(max, habit.streak?.longest || 0), 0));
  
  // L·∫•y top 5 th√≥i quen c√≥ t·ª∑ l·ªá ho√†n th√†nh cao nh·∫•t
  const habitsWithStats = await Promise.all(habits.map(async (habit) => {
    const habitCompletions = completions.filter(c => c.habit.toString() === habit._id.toString());
    const rate = daysInRange > 0 ? (habitCompletions.length / daysInRange) * 100 : 0;
    
    return {
      _id: habit._id,
      title: habit.title,
      icon: habit.icon,
      color: habit.color,
      completionRate: rate,
      streak: habit.streak?.current || 0
    };
  }));
  
  const topHabits = habitsWithStats
    .sort((a, b) => b.completionRate - a.completionRate)
    .slice(0, 5);
  
  // T·∫°o d·ªØ li·ªáu ho√†n th√†nh theo ng√†y
  const completionData = [];
  const days = [];
  for (let d = new Date(start); d <= end; d.setDate(d.getDate() + 1)) {
    days.push(new Date(d));
  }
  
  for (const day of days) {
    const dayStart = new Date(day);
    dayStart.setHours(0, 0, 0, 0);
    
    const dayEnd = new Date(day);
    dayEnd.setHours(23, 59, 59, 999);
    
    const dayCompletions = completions.filter(c => 
      c.date >= dayStart && c.date <= dayEnd
    );
    
    completionData.push({
      date: day.toISOString().split('T')[0],
      completed: dayCompletions.length,
      total: habits.length,
      rate: habits.length > 0 ? dayCompletions.length / habits.length : 0
    });
  }
  
  res.json({
    overview: {
      completionRate: Math.round(completionRate),
      currentStreak,
      bestStreak
    },
    topHabits,
    completionData
  });
});

module.exports = {
  getHabits,
  getHabitById,
  createHabit,
  updateHabit,
  deleteHabit,
  completeHabit,
  uncompleteHabit,
  getHabitHistory,
  getCompletionsByDate,
  getHabitStats
};